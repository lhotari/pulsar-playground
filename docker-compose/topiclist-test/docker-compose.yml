networks:
  pulsar:
    driver: bridge

x-common-base: &common-base
  image: apachepulsar/pulsar-all:latest
  networks:
    pulsar:

x-zookeeper-base: &zookeeper-base
  <<: *common-base
  command: |
    bash -c "bin/apply-config-from-env.py conf/zookeeper.conf && \
             bin/apply-config-from-env.py conf/pulsar_env.sh && \
             bin/generate-zookeeper-config.sh conf/zookeeper.conf && \
             exec bin/pulsar zookeeper"
  environment:
    ZOOKEEPER_SERVERS: zk1,zk2,zk3
    PULSAR_MEM: -Xmx128m

x-bookkeeper-base: &bookkeeper-base
  <<: *common-base
  command: |-
    bash -c "export dbStorage_writeCacheMaxSizeMb="${dbStorage_writeCacheMaxSizeMb:-16}" && \
             export dbStorage_readAheadCacheMaxSizeMb="${dbStorage_readAheadCacheMaxSizeMb:-16}" && \
             bin/apply-config-from-env.py conf/bookkeeper.conf && \
             { bin/update-rocksdb-conf-from-env || true; } && \
             bin/apply-config-from-env.py conf/pulsar_env.sh && \
             bin/watch-znode.py -z $$zkServers -p /initialized-$$clusterName -w && \
             exec bin/pulsar bookie"
  environment:
    clusterName: test
    zkServers: zk1:2181,zk2:2181,zk3:2181
    numAddWorkerThreads: 8
    useHostNameAsBookieID: "true"
    BOOKIE_MEM: -Xmx256m

x-broker-base: &broker-base
  <<: *common-base
  restart: on-failure
  command: |
    bash -c "bin/apply-config-from-env.py conf/broker.conf && \
             bin/apply-config-from-env.py conf/pulsar_env.sh && \
             bin/watch-znode.py -z $$zookeeperServers -p /initialized-$$clusterName -w && \
             exec bin/pulsar broker"
  environment: &broker-env
    clusterName: test
    zookeeperServers: zk1:2181,zk2:2181,zk3:2181
    configurationStore: zk1:2181,zk2:2181,zk3:2181
    webSocketServiceEnabled: "false"
    functionsWorkerEnabled: "false"
    PULSAR_MEM: -Xmx256m
    OPTS: >
      -XX:+UnlockDiagnosticVMOptions -XX:+DebugNonSafepoints -XX:FlightRecorderOptions=stackdepth=1024
      -Dcom.sun.management.jmxremote
      -Dcom.sun.management.jmxremote.authenticate=false
      -Dcom.sun.management.jmxremote.ssl=false
      -Djava.rmi.server.hostname=localhost
      -Dcom.sun.management.jmxremote.local.only=false

services:

  zk1:
    <<: *zookeeper-base
    container_name: zk1
    hostname: zk1

  zk2:
    <<: *zookeeper-base
    container_name: zk2
    hostname: zk2

  zk3:
    <<: *zookeeper-base
    container_name: zk3
    hostname: zk3

  pulsar-init:
    <<: *common-base
    container_name: pulsar-init
    hostname: pulsar-init
    command: |
      bash -c '
        set -x
        ZNODE="/initialized-$$clusterName"
        bin/watch-znode.py -z $$zkServers -p / -w
        bin/watch-znode.py -z $$zkServers -p $$ZNODE -e
        if [ $$? != 0 ]; then
          echo Initializing cluster
          bin/apply-config-from-env.py conf/bookkeeper.conf &&
          bin/pulsar initialize-cluster-metadata --cluster $$clusterName --zookeeper $$zkServers \
                     --configuration-store $$configurationStore --web-service-url http://$$pulsarNode:8080/ \
                     --broker-service-url pulsar://$$pulsarNode:6650/ &&
          bin/watch-znode.py -z $$zkServers -p $$ZNODE -c
          echo Initialized
        else
          echo Already Initialized
        fi
      '
    environment:
      clusterName: test
      zkServers: zk1:2181
      configurationStore: zk1:2181
      pulsarNode: proxy1
      PULSAR_MEM: -Xmx128m
    depends_on:
      - zk1
      - zk2
      - zk3

  bk1:
    <<: *bookkeeper-base
    hostname: bk1
    container_name: bk1
    depends_on:
      - zk1
      - zk2
      - zk3
      - pulsar-init

  bk2:
    <<: *bookkeeper-base
    hostname: bk2
    container_name: bk2
    depends_on:
      - zk1
      - zk2
      - zk3
      - pulsar-init
      - bk1

  bk3:
    <<: *bookkeeper-base
    hostname: bk3
    container_name: bk3
    depends_on:
      - zk1
      - zk2
      - zk3
      - pulsar-init
      - bk1
      - bk2

  broker1:
    <<: *broker-base
    environment:
      <<: *broker-env
      PULSAR_EXTRA_OPTS: >
        -Dcom.sun.management.jmxremote.port=9991
        -Dcom.sun.management.jmxremote.rmi.port=9991
    ports:
      - "9991:9991"
    hostname: broker1
    container_name: broker1
    depends_on:
      - zk1
      - zk2
      - zk3
      - pulsar-init
      - bk1
      - bk2
      - bk3

  broker2:
    <<: *broker-base
    environment:
      <<: *broker-env
      PULSAR_EXTRA_OPTS: >
        -Dcom.sun.management.jmxremote.port=9992
        -Dcom.sun.management.jmxremote.rmi.port=9992
    ports:
      - "9992:9992"
    hostname: broker2
    container_name: broker2
    depends_on:
      - zk1
      - zk2
      - zk3
      - pulsar-init
      - bk1
      - bk2
      - bk3
      - broker1

  broker3:
    <<: *broker-base
    environment:
      <<: *broker-env
      PULSAR_EXTRA_OPTS: >
        -Dcom.sun.management.jmxremote.port=9993
        -Dcom.sun.management.jmxremote.rmi.port=9993
    ports:
      - "9993:9993"
    hostname: broker3
    container_name: broker3
    depends_on:
      - zk1
      - zk2
      - zk3
      - pulsar-init
      - bk1
      - bk2
      - bk3
      - broker1
      - broker2

  proxy1:
    <<: *common-base
    hostname: proxy1
    container_name: proxy1
    restart: on-failure
    command: |
      bash -c "bin/apply-config-from-env.py conf/proxy.conf && \
               bin/apply-config-from-env.py conf/pulsar_env.sh && \
               bin/watch-znode.py -z $$zookeeperServers -p /initialized-$$clusterName -w && \
               exec bin/pulsar proxy"
    environment:
      clusterName: test
      zookeeperServers: zk1:2181,zk2:2181,zk3:2181
      configurationStoreServers: zk1:2181,zk2:2181,zk3:2181
      PULSAR_MEM: -Xmx256m
    ports:
      - "6650:6650"
      - "8080:8080"
    depends_on:
      - zk1
      - zk2
      - zk3
      - pulsar-init
      - bk1
      - bk2
      - bk3
      - broker1